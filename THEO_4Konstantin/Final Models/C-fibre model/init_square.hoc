/////// Initialisation of C-fibre model for SQUARE waveform AC stimulation /////

load_file("nrngui.hoc")

RHOE = 300

load_file("axon.hoc")


///// /Simulation parameters ///////
dt = 0.001	//ms
timestep = dt
tinit = 0
tstop = 200 //ms
tfinal = tstop

v_init = -65

///////Test pulse parameters///////
stim_delay = 100 //ms
stim_amp = 15 //mA
stim_dur = 0.12 //Stimulation duration 0.12 ms

////////Blocking parameters///////
acfreq = 6000 //Hz
acdel = 10 //ms
acdp = ((1/acfreq)/2)*1000
acn = 1000000
acamp1 = -25 //mA
acamp2 = -acamp1

////////Intracellular stim (Test pulse)///////
objectvar stim
proc iclamps() {
axon stim = new IClamp(0.1)
stim.del = stim_delay
stim.amp = stim_amp
stim.dur = stim_dur
}

iclamps()


///////APCounters for spike calculating spike times for cond.vel///////
proc connectAPcounters() { local i localobj tmpapc, tmpstv
  $o1 = new List()
  $o2 = new List()
  i=0
  for (x,0) {
    tmpapc = new APCount(x)
    tmpapc.thresh = -10
    tmpstv = new Vector()
    tmpapc.record(tmpstv)
    $o1.append(tmpapc)
    $o2.append(tmpstv)
  }
}

objref apclist, stvlist
apclist = new List()
stvlist = new List()

axon connectAPcounters(apclist, stvlist)

///////Extracellular stim (Block electrode)/////////

//First compute xyz coordinates of nodes
load_file("interpxyz.hoc")

grindaway()
//location of electrode
XE = L/2  // um
YE = 1000
ZE = 0

//calculate transfer resistance, rx, between electrode and local node
proc setrx() {  // now expects xyz coords as arguments
  forall {
    if (ismembrane("xtra")) {
// avoid nodes at 0 and 1 ends, so as not to override values at internal nodes
      for (x,0) {
        r = sqrt((x_xtra(x) - xe)^2 + (y_xtra(x) - ye)^2 + (z_xtra(x) - ze)^2)
//        r = sqrt((x_xtra(x) - $1)^2 + (y_xtra(x) - $2)^2 + (z_xtra(x) - $3)^2)
        // 0.01 converts rho's cm to um and ohm to megohm
        // if electrode is exactly at a node, r will be 0
        // this would be meaningless since the location would be inside the cell
        // so force r to be at least as big as local radius
        if (r==0) r = diam(x)/2
        rx_xtra(x) = (RHOE / 4 / PI)*(1/r)*0.01
      }
    }
  }
}

create sElec  // bogus section to show extracell stim/rec electrode location
proc put_sElec() {
	sElec {
		// make it 1 um long
		pt3dclear()
		pt3dadd($1-0.5, $2, $3, 1)
		pt3dadd($1+0.5, $2, $3, 1)
	}
}
put_sElec(XE, YE, ZE)

proc setelec() {
	xe = $1
	ye = $2
	ze = $3
	setrx(xe, ye, ze)
	put_sElec(xe, ye, ze)
}

// setrx(50, 0, 0)  // put stim electrode at (x, y, z)

setelec(XE, YE, ZE)  // put stim electrode at (x, y, z)

//create stimulus wavefrom
//SQUARE
objref fsquare
proc acvectinit() {

dur = 30
fsquare = new Fsquare(0.5)
fsquare.del = acdel
fsquare.dp = acdp
fsquare.num = acn
fsquare.amp1 = acamp1
fsquare.amp2 = acamp2
setpointer fsquare.x, is_xtra
}
acvectinit()

/////Initialisation proc/////
proc init_all(){
//   define_shape()
  iclamps()
  connectAPcounters(apclist, stvlist)
  grindaway()
  setelec(XE, YE, ZE)
  acvectinit()
}

proc fast_init(){
//   define_shape()
  iclamps()
  connectAPcounters(apclist, stvlist)
  grindaway()
  setelec(XE, YE, ZE)
  //acvectinit()
}

/////Graphical User Interface/////

objectvar graph_1, graph_2, graph_3, graph_4, graph_5, rvp_, row_1, row_2, row_3, col_1, gElec, pElec
objectvar scene_vector_[9] //, deck
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}

row_1 = new HBox(3,0)
col_1 = new VBox(3,0) //
row_2 = new HBox(3,0)
row_3 = new HBox(3,0)
// deck =  new Deck()

col_1.intercept(1)
// deck.intercept(1)
row_1.intercept(1)
{
graph_1 = new Graph(0)
graph_1.label(0.4,0.90,"Membrane voltage")
graph_1.size(0,L,-80,40)
scene_vector_[3] = graph_1
{graph_1.view(0, -80, 9000, 120, 0, 462, 300.6, 200.8)}
flush_list.append(graph_1)
graph_1.save_name("flush_list.")
objectvar rvp_
rvp_ = new RangeVarPlot("v")
axon rvp_.begin(0)
axon rvp_.end(1)
rvp_.origin(0)
graph_1.addobject(rvp_, 2, 1, 0.8, 0.9)
}

{
graph_2 = new Graph(0)
graph_2.label(0.4,0.90,"Extracellular voltage")
graph_2.size(0,L,-2000,2000)
scene_vector_[4] = graph_2
{graph_2.view(0, -2000, 9000, 4000, 414, 126, 300.6, 200.8)}
flush_list.append(graph_2)
graph_2.save_name("flush_list.")
objectvar rvp_
rvp_ = new RangeVarPlot("e_extracellular")
axon rvp_.begin(0)
axon rvp_.end(1)
rvp_.origin(0)
graph_2.addobject(rvp_, 2, 1, 0.8, 0.9)
row_1.intercept(0)
row_1.map()
// deck.intercept(0)
// deck.flip_to(0)
// deck.map()
}

// deck.intercept(1)
row_1.intercept(1)
{
graph_3 = new Graph(0)
graph_3.label(0.4,0.90, "Action potential")
graph_3.size(0,50,-80,40)
scene_vector_[2] = graph_3
{graph_3.view(0, -80, tfinal, 120, 0, 126, 300.6, 200.8)}
graphList[0].append(graph_3)
graph_3.save_name("graphList[0].")
graph_3.addexpr("v(.5)", 4, 1, 0.8, 0.9, 2)
graph_3.addvar("axon.v( 0.166667 )", 2, 1, 0.8, 0.9, 2)
graph_3.addexpr("axon.v( 0.9 )", 3, 1, 0.8, 0.9, 2)
}

row_1.intercept(0)
// deck.intercept(0)

row_2.intercept(1)


{
xpanel("RunControl", 0)
xlabel("Simulation Settings")
	v_init = -65
	xvalue("Init","v_init", 1,"fcurrent()",0)
  xbutton("Init all"," fast_init() ")
	xbutton("Run","  	run() ")
	xbutton("Stop","stoprun=1")
	// runStopAt = 5
	// xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
	// runStopIn = 1
	// xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
	// xbutton("Single Step","steprun()")
	t = tinit
	xvalue("t","t", 2 )
	tstop = tfinal
	xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
	dt = timestep
	xvalue("dt","dt", 1,"setdt()", 0, 1 )
	//steps_per_ms = 200
	xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
	//screen_update_invl = 0.05
	xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
	//realtime = 0
	xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel()
}

{
xpanel("AC Stim Settings",0)
  xlabel("AC Stim Settings: SQUARE")
  xvalue("AC delay (ms)","fsquare.del",1)
  xvalue("AC amp1 (nA)","fsquare.amp1",1)
  xvalue("AC amp2 (nA)","fsquare.amp2",1)
  xvalue("AC no. of cycles","fsquare.num",1)
  xvalue("AC half cycle duration (ms)","fsquare.dp",1)
  xlabel("DC Stim Settings")
xvalue("DC stimulus amplitude (nA)","stim_amp",1,"iclamps()")
xvalue("DC stimulus delay (ms)","stim_delay",1,"iclamps()")
xvalue("DC stimulus duration (ms)","stim_dur",1,"iclamps()")
  xpanel()
}

{
xpanel("Extracellular Electrode Location", 0)
xlabel("AC Electrode Location (um)")
XE = L/2
xvalue("x","XE", 1,"setelec(XE,YE,ZE)", 0, 1 )
YE = 1000
xvalue("y","YE", 1,"setelec(XE,YE,ZE)", 0, 1 )
ZE = 0
xvalue("z","ZE", 1,"setelec(XE,YE,ZE)", 0, 1 )
// xpanel(830,463)
  xlabel("Axon Geometry")
  xvalue("nseg", "nseg",1)
  xvalue("Diameter (um)", "diam",1)
  xvalue("Total length (um)", "L",1)

  xbutton("Export results", "export_results()")
  xbutton("Run & export spike times", "runcount()")
  xpanel()
}


{
gElec = new Shape(0)  // create it but don't map it to the screen yet
gElec.view(-245.413, -250, 10000, 520, 824, 123, 201.6, 201.28)
// objref pElec  // bogus PointProcess just to show stim location
sElec pElec = new PointProcessMark(0.5) // middle of sElec
gElec.point_mark(pElec, 2) // make it red
}

row_2.intercept(0)
row_2.map()

col_1.intercept(0)
col_1.map()


objectvar scene_vector_[1]
{doNotify()}



// Export results for all nodes .
proc export_results() {
  finitialize(v_init)
  fcurrent()
  batch_save()
  strdef filename, headers
  sprint(headers, "dt %f\ntfinal %f\nacfreq%1.f\nfsquare.amp1 %.1f\nnseg %f\nL %f\ndiam %f\nstim_amp %f", dt, tfinal, acfreq, fsquare.amp1, nseg, L, diam, stim_amp)
  sprint(filename, "D:/Thesis/data/C-fibre model/Square/2um/1mm IED/%d_Hz_%.1f_mA.txt", acfreq, fsquare.amp1)
  batch_save()
  // for (x,0) {
  //    // batch_save(&axon.v(x),&axon.e_extracellular(x),&axon.m_hh(x),&axon.h_hh(x),&axon.n_hh(x),&axon.ina(x),&axon.ik(x))
  //    batch_save(&axon.v(x),&axon.e_extracellular(x),&axon.ik(x),&axon.ina(x),&axon.ki(x),&axon.nai(x),&axon.ko(x),&axon.nao(x),&axon.ih_hcn(x),&axon.ina_nav17(x),&axon.i_nav1p8(x),&axon.i_nav1p9(x),&axon.ink_NaKpump(x),&axon.ik_knatype(x),&axon.ik_kmtype(x),&axon.ik_Kdr(x),&axon.jika_ka(x),&axon.mf_hcn(x),&axon.msl_hcn(x),&axon.a_ka(x),&axon.b_ka(x),&axon.m_Kdr(x),&axon.h_Kdr(x),&axon.n_kmtype(x),&axon.w_knatype(x),&axon.m_nav1p8(x),&axon.h_nav1p8(x),&axon.m_nav1p9(x),&axon.h_nav1p9(x),&axon.O_nav17(x),&axon.C1_nav17(x))
  // }
  // for (x,0) {
  // batch_save(&axon.v(x))
  // }
  for (x,0) {
  // batch_save(&axon.v(x),&axon.e_extracellular(x),&axon.m_hh(x),&axon.h_hh(x),&axon.n_hh(x),&axon.ina(x),&axon.ik(x))
    batch_save(&axon.v(x),&axon.e_extracellular(x),&axon.ik(x),&axon.ina(x),&axon.ki(x),&axon.nai(x),&axon.ko(x),&axon.nao(x),&axon.ina_hcn(x),&axon.ik_hcn(x),&axon.ina_nav1p7(x),&axon.ina_nav1p8(x),&axon.ina_nav1p9(x),&axon.ina_NaKpump(x),&axon.ik_NaKpump(x),&axon.ik_knatype(x),&axon.ik_km(x),&axon.ik_kdr(x),&axon.ik_ka(x),&axon.nf_hcn(x),&axon.ns_hcn(x),&axon.n_ka(x),&axon.h_ka(x),&axon.n_kdr(x),&axon.ns_km(x),&axon.nf_km(x),&axon.w_knatype(x),&axon.m_nav1p8(x),&axon.h_nav1p8(x),&axon.s_nav1p8(x),&axon.u_nav1p8(x),&axon.m_nav1p9(x),&axon.h_nav1p9(x),&axon.s_nav1p9(x),&axon.m_nav1p7(x),&axon.h_nav1p7(x),&axon.s_nav1p7(x))
  // batch_save(&axon.mf_hcn(x),&axon.msl_hcn(x),&axon.a_ka(x),&axon.b_ka(x),&axon.m_Kdr(x),&axon.h_Kdr(x),&axon.n_kmtype(x),&axon.w_knatype(x),&axon.m_nav1p8(x),&axon.h_nav1p8(x),&axon.m_nav1p9(x),&axon.h_nav1p9(x),&axon.O_nav17(x),&axon.C1_nav17(x))
  }
  batch_run(tstop, dt, filename, headers)
}

// Export spike times to matlab for calculation of conduction velocity
proc runcount(){ localobj savedata
run()
strdef file_name
sprint(file_name, "D:/Thesis/data/C-fibre model/Square/2um/1mm IED/%d_Hz_%.1f_mA_ST.txt", acfreq, fsquare.amp1)
savedata = new File()
savedata.wopen(file_name)
for i=0,stvlist.count()-1{
  print "spike times at internal node ", i
  stvlist.o(i).printf
  stvlist.o(i).printf(savedata)
}
savedata.close()
}


// /////// BATCH RUN SIMULATION ///////////
//
// objref Frequencies, mA_amplitudes
//
// Frequencies = new Vector()
// mA_amplitudes = new Vector()
//
// proc freq(){
//     Frequencies.append(1000)
//     Frequencies.append(2000)
//     Frequencies.append(3000)
//     Frequencies.append(4000)
//     Frequencies.append(5000)
//     Frequencies.append(6000)
//     Frequencies.append(7000)
//     Frequencies.append(8000)
//     Frequencies.append(9000)
//     Frequencies.append(10000)
//     Frequencies.append(11000)
//     Frequencies.append(12000)
//     Frequencies.append(13000)
//     Frequencies.append(14000)
//     Frequencies.append(15000)
//     Frequencies.append(16000)
//     Frequencies.append(17000)
//     Frequencies.append(18000)
//     Frequencies.append(19000)
//     Frequencies.append(20000)
//     Frequencies.append(21000)
//     Frequencies.append(22000)
//     Frequencies.append(23000)
//     Frequencies.append(24000)
//     Frequencies.append(25000)
//     Frequencies.append(26000)
//     Frequencies.append(27000)
//     Frequencies.append(28000)
//     Frequencies.append(29000)
//     Frequencies.append(30000)
//     Frequencies.append(31000)
//     Frequencies.append(32000)
//     Frequencies.append(33000)
//     Frequencies.append(34000)
//     Frequencies.append(35000)
//     Frequencies.append(36000)
//     Frequencies.append(37000)
//     Frequencies.append(38000)
//     Frequencies.append(39000)
//     Frequencies.append(40000)
//     Frequencies.append(41000)
// }
//
// proc amp(){
//   mA_amplitudes.append(-1)
//   mA_amplitudes.append(-10)
//   mA_amplitudes.append(-15)
//   mA_amplitudes.append(-20)
//   mA_amplitudes.append(-25)
//   mA_amplitudes.append(-30)
//   mA_amplitudes.append(-35)
//   mA_amplitudes.append(-40)
//   mA_amplitudes.append(-45)
//   mA_amplitudes.append(-50)
//   mA_amplitudes.append(-55)
//   mA_amplitudes.append(-60)
//   mA_amplitudes.append(-65)
//   mA_amplitudes.append(-70)
//   mA_amplitudes.append(-75)
//   mA_amplitudes.append(-80)
//   mA_amplitudes.append(-85)
//   mA_amplitudes.append(-90)
//   mA_amplitudes.append(-95)
//   mA_amplitudes.append(-100)
//   mA_amplitudes.append(-105)
//   mA_amplitudes.append(-110)
//   mA_amplitudes.append(-115)
//   mA_amplitudes.append(-120)
//   mA_amplitudes.append(-125)
//   mA_amplitudes.append(-130)
//   mA_amplitudes.append(-135)
//   mA_amplitudes.append(-140)
//   mA_amplitudes.append(-145)
//   mA_amplitudes.append(-150)
//   mA_amplitudes.append(-155)
//   mA_amplitudes.append(-160)
//   mA_amplitudes.append(-165)
//   mA_amplitudes.append(-170)
//   mA_amplitudes.append(-175)
//   mA_amplitudes.append(-180)
//   mA_amplitudes.append(-185)
//   mA_amplitudes.append(-190)
//   mA_amplitudes.append(-195)
//   mA_amplitudes.append(-200)
//   mA_amplitudes.append(-210)
//   mA_amplitudes.append(-220)
//   mA_amplitudes.append(-230)
//   mA_amplitudes.append(-240)
//   mA_amplitudes.append(-250)
//   mA_amplitudes.append(-260)
//   mA_amplitudes.append(-270)
//   mA_amplitudes.append(-280)
//   mA_amplitudes.append(-290)
//   mA_amplitudes.append(-300)
//   // mA_amplitudes.append(-310)
//   // mA_amplitudes.append(-320)
//   // mA_amplitudes.append(-330)
//   // mA_amplitudes.append(-340)
//   // mA_amplitudes.append(-350)
//   // mA_amplitudes.append(-360)
//   // mA_amplitudes.append(-370)
//   // mA_amplitudes.append(-380)
//   // mA_amplitudes.append(-390)
//   // mA_amplitudes.append(-400)
//   // mA_amplitudes.append(-400)
//   // mA_amplitudes.append(-450)
//   // mA_amplitudes.append(-500)
//   // mA_amplitudes.append(-550)
//   // mA_amplitudes.append(-600)
//   // mA_amplitudes.append(-650)
//   // mA_amplitudes.append(-700)
//   // mA_amplitudes.append(-800)
//   // mA_amplitudes.append(-900)
//   // mA_amplitudes.append(-1000)
// }
//
//
// Frequencies.buffer_size(100)
// mA_amplitudes.buffer_size(100)
// amp()
// freq()
//
// for freq_index = 0, Frequencies.size() -1{
//
//   for amp_index = 0, mA_amplitudes.size() - 1{
//
//     // forall delete_section()
//     mA_amplitudes.resize(0)
//     Frequencies.resize(0)
//
//     amp()
//     freq()
//
//     init_all()
//     //SQUARE
//     fsquare.dp = ((1/Frequencies.x[freq_index])/2)*1000
//     fsquare.amp1 = mA_amplitudes.x[amp_index]
//     fsquare.amp2 = -fsquare.amp1
//     fsquare.del = 10
//     fsquare.num = 1000000
//     frequency = Frequencies.x[freq_index]
//     print "\nFrequency ", frequency, "\nHalfcycle duration ", fsquare.dp, "\nAmplitude ", fsquare.amp1, "\n"
//     // stdinit()
//     finitialize(-65)
//     fcurrent()
//     batch_save()
//     strdef filename, headers
//     sprint(headers, "dt %f\ntfinal %f\nacfreq %1.f\namplitude %.1f\nnseg %f\nL %f\ndiam %f\nstim_amp %f", dt, tfinal, frequency, fsquare.amp1, nseg, L, diam, stim_amp)
//     sprint(filename, "D:/Thesis/data/Square/2um/1mm IED/Batch_run 1-40kHz/%d_Hz_%.1f_mA.txt", frequency, fsquare.amp1)
//     batch_save()
//     for (x,0) {
//       batch_save(&axon.v(x))
//     }
//     //   batch_save(&axon.v(x),&axon.e_extracellular(x),&axon.ik(x),&axon.ina(x),&axon.ki(x),&axon.nai(x),&axon.ko(x),&axon.nao(x),&axon.ina_hcn(x),&axon.ik_hcn(x),&axon.ina_nav1p7(x),&axon.ina_nav1p8(x),&axon.i_nav1p9(x),&axon.ina_NaKpump(x),&axon.ik_NaKpump(x),&axon.ik_knatype(x),&axon.ik_km(x),&axon.ik_kdr(x),&axon.ik_ka(x),&axon.nf_hcn(x),&axon.ns_hcn(x),&axon.n_ka(x),&axon.h_ka(x),&axon.n_kdr(x),&axon.ns_km(x),&axon.nf_km(x),&axon.w_knatype(x),&axon.m_nav1p8(x),&axon.h_nav1p8(x),&axon.s_nav1p8(x),&axon.u_nav1p8(x),&axon.m_nav1p9(x),&axon.h_nav1p9(x),&axon.s_nav1p9(x),&axon.m_nav1p7(x),&axon.h_nav1p7(x),&axon.s_nav1p7(x))
//       //
//       // batch_save(&axon.v(0.5),&axon.e_extracellular(0.5),&axon.ik(0.5),&axon.ina(0.5),&axon.ki(0.5),&axon.nai(0.5),&axon.ko(0.5),&axon.nao(0.5),&axon.ina_hcn(0.5),&axon.ik_hcn(0.5),&axon.ina_nav1p7(0.5),&axon.ina_nav1p8(0.5),&axon.ina_nav1p9(0.5),&axon.ina_NaKpump(0.5),&axon.ik_NaKpump(0.5),&axon.ik_knatype(0.5),&axon.ik_km(0.5),&axon.ik_kdr(0.5),&axon.ik_ka(0.5),&axon.nf_hcn(0.5),&axon.ns_hcn(0.5),&axon.n_ka(0.5),&axon.h_ka(0.5),&axon.n_kdr(0.5),&axon.ns_km(0.5),&axon.nf_km(0.5),&axon.w_knatype(0.5),&axon.m_nav1p8(0.5),&axon.h_nav1p8(0.5),&axon.s_nav1p8(0.5),&axon.u_nav1p8(0.5),&axon.m_nav1p9(0.5),&axon.h_nav1p9(0.5),&axon.s_nav1p9(0.5),&axon.m_nav1p7(0.5),&axon.h_nav1p7(0.5),&axon.s_nav1p7(0.5))
//       //
//       // batch_save(&axon.v(0.9))
//
//     batch_run(tstop, dt, filename, headers)
//   }
// }
